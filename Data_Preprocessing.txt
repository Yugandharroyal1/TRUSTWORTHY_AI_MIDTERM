import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array

IMG_SIZE = (256, 256)

def load_dataset(image_folder, mask_folder):
    images, masks = [], []
    mask_files = set(os.listdir(mask_folder))  # Ensure mask exists

    for filename in os.listdir(image_folder):
        img_path = os.path.join(image_folder, filename)
        mask_path = os.path.join(mask_folder, filename)

        if filename in mask_files:
            img = load_img(img_path, target_size=IMG_SIZE, color_mode="grayscale")
            img = img_to_array(img) / 255.0  # Normalize

            mask = load_img(mask_path, target_size=IMG_SIZE, color_mode="grayscale")
            mask = img_to_array(mask) / 255.0  # Normalize

            images.append(img)
            masks.append(mask)

    return np.array(images), np.array(masks)

# Load Data
train_images, train_masks = load_dataset(frame_path, mask_path)
print(f"âœ… Loaded {train_images.shape[0]} images and {train_masks.shape[0]} masks.")